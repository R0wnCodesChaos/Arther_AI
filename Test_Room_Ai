import pvporcupine, pyaudio, struct, whisper, wave, os, tempfile, threading, pygame, time, numpy as np
from openai import OpenAI
from gtts import gTTS
from pathlib import Path
from typing import Optional
#========================================================================================= CONFIGURATION
ACCESS_KEY = os.getenv("PORCUPINE_ACCESS_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
USE_CUSTOM_WAKE_WORD, WAKE_WORD_PATH, BUILT_IN_WAKE_WORD = True, "Hey-Arthur_en_windows_v3_0_0.ppn", "jarvis"
MICROPHONE_INDEX, RECORD_SECONDS, SAMPLE_RATE, CHUNK_SIZE = 1, 6, 16000, 512
MAX_HISTORY, TEST_MODE = 10, True
USER_NAME, USER_AGE, USER_LOCATION = "Ronan", 13, "Noels Pond, Newfoundland, Canada"
USER_PETS = "dogs (Shadow, Sophie, Kenzy), cats (Boots, Bianca)"
USER_INTERESTS = "video games (Minecraft, Green Hell, Grounded), sci-fi shows (Dark, Stranger Things, Lost in Space)"
CUSTOM_RESPONSES = {"brother iq": "Your brother's IQ is lower than a rock. Just kidding!", "brothers iq": "Your brother's IQ is lower than a rock. Just kidding!"}
AI_NAME, AI_MODEL, AI_MAX_TOKENS, AI_TEMPERATURE = "Arthur", "gpt-4o-mini", 200, 0.8
#========================================================================================= INITIALIZATION
pygame.mixer.init()
client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY and OPENAI_API_KEY.startswith("sk-") else None
conversation_history, wake_word_queue, interrupt_event, is_speaking = [], [], threading.Event(), False
history_lock, stream_lock = threading.Lock(), threading.Lock()

porcupine = pvporcupine.create(access_key=ACCESS_KEY, keyword_paths=[WAKE_WORD_PATH] if USE_CUSTOM_WAKE_WORD else None, keywords=None if USE_CUSTOM_WAKE_WORD else [BUILT_IN_WAKE_WORD])
whisper_model = whisper.load_model("base")
pa = pyaudio.PyAudio()
stream = pa.open(rate=porcupine.sample_rate, channels=1, format=pyaudio.paInt16, input=True, frames_per_buffer=porcupine.frame_length, input_device_index=MICROPHONE_INDEX)

print(f"✅ {AI_NAME} initialized | Mic: {pa.get_device_info_by_index(MICROPHONE_INDEX)['name'] if MICROPHONE_INDEX else 'default'}")
#========================================================================================= CORE FUNCTIONS
def background_wake_monitor():
    global is_speaking
    while True:
        try:
            with stream_lock:
                pcm = stream.read(porcupine.frame_length, exception_on_overflow=False)
            if porcupine.process(struct.unpack_from("h" * porcupine.frame_length, pcm)) >= 0:
                (interrupt_event.set() if is_speaking else wake_word_queue.append(time.time()))
                TEST_MODE and print(f"\n{'⚠️ INTERRUPT!' if is_speaking else '🟢 Wake word detected!'}")
        except Exception as e:
            TEST_MODE and print(f"⚠️ Monitor error: {e}")
            time.sleep(0.1)

def record_audio(seconds: int = RECORD_SECONDS) -> Optional[str]:
    TEST_MODE and print(f"🎧 Listening for up to {seconds} seconds...")
    with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp_file:
        output_file = tmp_file.name
    try:
        stream2 = pa.open(format=pyaudio.paInt16, channels=1, rate=SAMPLE_RATE, input=True, frames_per_buffer=CHUNK_SIZE, input_device_index=MICROPHONE_INDEX)
        [stream2.read(CHUNK_SIZE, exception_on_overflow=False) for _ in range(5)]
        time.sleep(0.2)
        TEST_MODE and print("   🎤 Recording now!")
        frames, silence_chunks, max_silence = [], 0, int(1.5 * SAMPLE_RATE / CHUNK_SIZE)
        for _ in range(int(SAMPLE_RATE / CHUNK_SIZE * seconds)):
            data = stream2.read(CHUNK_SIZE, exception_on_overflow=False)
            frames.append(data)
            if len(frames) > 10:
                rms = np.sqrt(np.mean(np.square(np.frombuffer(data, dtype=np.int16).astype(np.float64))))
                if rms < 500:
                    silence_chunks += 1
                    if silence_chunks > max_silence:
                        TEST_MODE and print("   ⏹️ Silence detected")
                        break
                else:
                    silence_chunks = 0
        stream2.stop_stream()
        stream2.close()
        if frames and len(frames) >= 3:
            with wave.open(output_file, "wb") as wf:
                wf.setnchannels(1)
                wf.setsampwidth(pa.get_sample_size(pyaudio.paInt16))
                wf.setframerate(SAMPLE_RATE)
                wf.writeframes(b"".join(frames))
            if os.path.getsize(output_file) > 1000:
                TEST_MODE and print(f"✅ Audio captured: {len(frames)} frames")
                return output_file
    except Exception as e:
        print(f"❌ Recording error: {e}")
    return None

def transcribe_audio(file_path: str) -> Optional[str]:
    if not file_path or not Path(file_path).exists():
        return None
    try:
        TEST_MODE and print("🔄 Transcribing audio...")
        result = whisper_model.transcribe(file_path, language="en", fp16=False, temperature=0.0, condition_on_previous_text=False)
        transcription = result["text"].strip().replace("[BLANK_AUDIO]", "").strip()
        TEST_MODE and transcription and print(f"   📝 Transcribed: '{transcription}'")
        return transcription if len(transcription) > 2 else None
    except Exception as e:
        print(f"❌ Transcription error: {e}")
        return None

def ask_ai(prompt: str) -> str:
    global conversation_history
    prompt_clean = prompt.lower().replace('.', '').replace(',', '')
    if "activate test mode" in prompt_clean or "enable test mode" in prompt_clean:
        globals()['TEST_MODE'] = True
        return "Test mode activated."
    elif "deactivate test mode" in prompt_clean or "disable test mode" in prompt_clean:
        globals()['TEST_MODE'] = False
        return "Test mode deactivated."
    for trigger, response in CUSTOM_RESPONSES.items():
        if trigger in prompt_clean:
            return response
    if not client:
        return "My AI brain isn't connected. Please configure the OpenAI API key."
    try:
        TEST_MODE and print("🤔 Thinking...")
        messages = [{"role": "system", "content": f"""You are {AI_NAME}, a friendly and conversational AI assistant.

Your personality: Warm, funny, helpful, personable. Use casual language, contractions, wit, and occasional gen z slang. Keep responses 2-3 sentences unless asked for more. Be natural and engaging like a smart friend.

The user: {USER_NAME}, {USER_AGE} years old, lives in {USER_LOCATION}. Pets: {USER_PETS}. Interests: {USER_INTERESTS}. Respond in English or German if they speak German."""}]
        with history_lock:
            for entry in conversation_history[-MAX_HISTORY:]:
                messages.extend([{"role": "user", "content": entry["user"]}, {"role": "assistant", "content": entry["assistant"]}])
        messages.append({"role": "user", "content": prompt})
        response = client.chat.completions.create(model=AI_MODEL, messages=messages, max_tokens=AI_MAX_TOKENS, temperature=AI_TEMPERATURE, presence_penalty=0.6, frequency_penalty=0.3).choices[0].message.content.strip()
        with history_lock:
            conversation_history.append({"user": prompt, "assistant": response})
            conversation_history = conversation_history[-MAX_HISTORY:] if len(conversation_history) > MAX_HISTORY else conversation_history
        return response
    except Exception as e:
        if "authentication" in str(e).lower() or "401" in str(e):
            return "I'm having trouble connecting. Please check the API key."
        elif "429" in str(e):
            return "Whoa, I'm getting overwhelmed. Give me a moment?"
        print(f"❌ AI error: {e}")
        return "Hmm, something went wrong. Mind trying again?"

def play_audio(file_path: str) -> bool:
    try:
        pygame.mixer.music.load(file_path)
        pygame.mixer.music.play()
        while pygame.mixer.music.get_busy():
            if interrupt_event.is_set():
                pygame.mixer.music.stop()
                pygame.mixer.music.unload()
                return False
            pygame.time.Clock().tick(100)
        pygame.mixer.music.unload()
        return True
    except:
        return False

def speak(text: str) -> bool:
    global is_speaking
    print(f"{'💬 ' if TEST_MODE else ''}{AI_NAME}: {text}")
    interrupt_event.clear()
    is_speaking = True
    try:
        if interrupt_event.is_set():
            return False
        with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as tmp:
            audio_file = tmp.name
        gTTS(text=text, lang='en', slow=False).save(audio_file)
        success = play_audio(audio_file)
        try:
            time.sleep(0.1)
            os.remove(audio_file)
        except:
            pass
        return success
    except Exception as e:
        print(f"❌ TTS failed: {e}")
        return False
    finally:
        is_speaking = False
#========================================================================================= MAIN LOOP
threading.Thread(target=background_wake_monitor, daemon=True).start()
wake_phrase = "Hey Arthur" if USE_CUSTOM_WAKE_WORD else BUILT_IN_WAKE_WORD.title()
print(f"🎙️ {AI_NAME} is ready. Say '{wake_phrase}' to begin.\n")

try:
    while True:
        if wake_word_queue:
            wake_word_queue.clear()
            if is_speaking:
                interrupt_event.set()
                pygame.mixer.music.stop()
                is_speaking = False
                time.sleep(0.3)
            interrupt_event.clear()
            audio_file = record_audio()
            if audio_file:
                command = transcribe_audio(audio_file)
                if command and len(command.strip()) > 2:
                    print(f"{'🗣️ ' if TEST_MODE else ''}You: {command}")
                    speak(ask_ai(command))
                    os.remove(audio_file)
                else:
                    TEST_MODE and print("⚠️ Could not understand speech")
                    speak("I didn't catch that. Could you speak louder?")
            else:
                speak("I had trouble recording. Please try again.")
            TEST_MODE and print(f"\n🎙️ Ready for next command... (Memory: {len(conversation_history)} exchanges)")
        time.sleep(0.05)
except KeyboardInterrupt:
    print("\n\n🛑 Shutting down...")
finally:
    stream.stop_stream()
    stream.close()
    pa.terminate()
    porcupine.delete()
    pygame.mixer.quit()
    print("👋 Goodbye!")